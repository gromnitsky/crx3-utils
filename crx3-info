#!/usr/bin/env node
'use strict';

let crx = require('./index')
let u = crx.u
let argv = process.argv

function main() {
    if (argv[2] && argv.length !== 2+2)
	u.err(`Usage: ${u.progname()} [rsa [0-9]+] < file.zip`)

    u.read().then(crx.parse).then( hdr => {
	if (argv[2] === 'rsa') {
	    let der = hdr.sha256_with_rsa[argv[3]].public_key
	    return crx.der2pem(der)
	} else if (argv[2]) throw new Error(`no support for ${argv[2]}`)

	return dump(hdr)

    }).then(process.stdout.write.bind(process.stdout)).catch(u.err)
}

function dump(hdr) {
    return [
	["id", mpdecimal(hdr.signed_header_data.crx_id.toString('hex'))],
	["header", hdr.header_total_len],
	["payload", hdr.payload_len],
	["sha256_with_rsa", hdr.sha256_with_rsa.length],
	["sha256_with_ecdsa", hdr.sha256_with_ecdsa.length]
    ].map( ([k,v]) => k.padEnd(20, ' ') + ' ' + v).join`\n` + "\n"
}

// for each ch, convert it to base-10, and add the ASCII code for 'a'
function mpdecimal(hex) {
    let a = 'a'.charCodeAt(0)
    return hex.split('')
	.map( v => String.fromCharCode((parseInt(v, 16)+a))).join``
}

main()
