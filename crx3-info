#!/usr/bin/env node
'use strict';

let sprintf = require('sprintf-js').sprintf
let cmd = require('commander')
let crx = require('./index')
let u = crx.u

function main() {
    cmd.usage('[options] [public.pem] < file.crx')
	.option('--key-rsa <idx>', 'rsa public key', parseInt)
	.parse(process.argv)

    u.read().then(crx.parse).then( hdr => {
	if (cmd.keyRsa >= 0) {
	    let der = hdr.sha256_with_rsa[cmd.keyRsa].public_key
	    return crx.der2pem(der)
	}

	if (cmd.args[0]) return u.read(cmd.args[0]).then(crx.pem2der)
	    .then( key => {
		if (!crx.validate(key, hdr.signed_header_data.crx_id))
		    process.exitCode = 1
		return ''
	    })

	return dump(hdr)

    }).then(process.stdout.write.bind(process.stdout)).catch(u.err)
}

function dump(hdr) {
    return [
	["id", hdr.signed_header_data.crx_id.toString('hex')], // FIXME
	["header", hdr.header_total_len],
	["payload", hdr.payload_len],
	["sha256_with_rsa", hdr.sha256_with_rsa.length],
	["sha256_with_ecdsa", hdr.sha256_with_ecdsa.length]
    ].map( v => sprintf('%-20s %s', ...v)).join`\n` + "\n"
}

main()
